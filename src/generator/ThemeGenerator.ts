/**
 * src/generator/ThemeGenerator.ts
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–º –¥–ª—è Vela Spectrum.
 *
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ **—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º** –≤ —Ñ–æ—Ä–º–∞—Ç–µ VS Code (`themes/*.json`).
 * –û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
 * - –¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'default', 'green', 'pastel')
 * - –†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (normal, highContrast, colorblind –∏ –¥—Ä.)
 * - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏ (–∏–∑ `ThemeElementName`)
 * - –ü–æ–¥—Å–≤–µ—Ç–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (tokenColors)
 *
 * ### –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
 * 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ü–≤–µ—Ç–æ–≤–æ–π –ø—Ä–µ—Å–µ—Ç
 * 2. –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã:
 *    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∏–ø (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è)
 *    - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —á–µ—Ä–µ–∑ `ThemeColors.generate`
 *    - –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏–∑ `ThemeElementName`
 *    - –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç `colors` –∏ `tokenColors`
 * 3. –†–µ–∑—É–ª—å—Ç–∞—Ç: –º–∞—Å—Å–∏–≤ —Ç–µ–º, –≥–æ—Ç–æ–≤—ã—Ö –∫ —ç–∫—Å–ø–æ—Ä—Ç—É
 *
 * –í—Å–µ —Ü–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ **–ø–µ—Ä—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ OKLCH**,
 * —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –í–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
 * - –í—ã—Å–æ–∫—É—é —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
 * - –ü–æ–¥–¥–µ—Ä–∂–∫—É —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (–¥–∞–ª—å—Ç–æ–Ω–∏–∑–º, –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
 *
 * @module ThemeGenerator
 * @author telianedward (https://github.com/telianedward )
 * @license MIT
 * @see https://github.com/telianedward/VelaSpectrum  ‚Äì –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
 * @see https://code.visualstudio.com/api/references/theme-color  ‚Äì –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º VS Code
 * @see https://bottosson.github.io/posts/oklab/  ‚Äì OKLAB –∏ OKLCH
 */
import { themeConfigs } from '../themes/config.js';
import { ThemeColors } from '../colors/ThemeColors.js';
import { palettes } from '../themes/colorPalettePresets.js';
import { ThemeElementName } from '../colors/ThemeElementName.js';
import { applyAlpha } from '../utils/color.js';
import { type PaletteName } from '../types/index.js';

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º `with` –≤–º–µ—Å—Ç–æ `assert`
import tokenColorsConfig from './tokenColors.json' with { type: 'json' };

// –¢–∏–ø –¥–ª—è –ø—Ä–∞–≤–∏–ª tokenColors
interface TokenColorRule {
  scope: string | string[];
  settings: {
    foreground?: string;
    background?: string;
    fontStyle?: string;
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞.
 *
 * –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–º (—Å–≤–µ—Ç–ª—ã–µ, —Ç—ë–º–Ω—ã–µ, high contrast –∏ –¥—Ä.) –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞.
 * –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
 * - `name`: –∏–º—è —Ç–µ–º—ã
 * - `type`: —Ç–∏–ø (vs, vs-dark, hc-black)
 * - `semanticHighlighting`: –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
 * - `colors`: –æ–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏, –ø–∞–Ω–µ–ª–∏, –≤–∫–ª–∞–¥–∫–∏)
 * - `tokenColors`: –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å—Ç—Ä–æ–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
 *
 * @function generateAllThemes
 * @param {PaletteName} [paletteName='default'] - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: 'default', 'green', 'pastel', 'contrast'
 * @returns {Array<{ config: object, theme: object }>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç:
 * - `config`: –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–º—ã
 * - `theme`: –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ç–µ–º—ã –¥–ª—è VS Code
 *
 * @example
 * const themes = generateAllThemes('green');
 * themes.forEach(({ config, theme }) => {
 *   fs.writeFileSync(`themes/${config.name}.json`, JSON.stringify(theme, null, 2));
 * });
 *
 * @see {@link ThemeColors.generate} ‚Äì –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 * @see {@link ThemeElementName} ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–æ–ª–µ–π VS Code
 * @see {@link applyAlpha} ‚Äì –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
 */
export function generateAllThemes(paletteName: PaletteName = 'default') {
  //console.log('üöÄ –ó–∞–ø—É—Å–∫ generateAllThemes:', paletteName);
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç —Ü–≤–µ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
  const palette = palettes[paletteName as PaletteName] ?? palettes.default;

  //console.log('üé® –ü—Ä–µ—Å–µ—Ç:', palette ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default' –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  if (!palette) {
    console.warn(`–ü—Ä–µ—Å–µ—Ç "${paletteName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "default".`);
    return generateAllThemes('default');
  }
 // console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–µ–º:', themeConfigs.length);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–µ–º–Ω–∞—è, —Å–≤–µ—Ç–ª–∞—è, high contrast –∏ —Ç.–¥.)
  return themeConfigs.map(config => {
    //console.log(`\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: ${config.name} (type: ${config.type}, mode: ${config.mode})`);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–º–∞ —Ç—ë–º–Ω–æ–π
    const isDark = config.type === 'vs-dark' || config.type === 'hc-black';
    //console.log('üåô isDark:', isDark);

    // üîç –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –∑–∞ palette –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è?
    const getNested = (obj: any, path: string): string | undefined => {
      const keys = path.split('.');
      let current = obj;
      for (const key of keys) {
        if (current == null || typeof current !== 'object' || !(key in current)) {
          return undefined;
        }
        current = current[key];
      }
      return current;
    };

    // console.log('üß© palette structure:', {
    //   hasDark: !!palette.dark,
    //   hasLight: !!palette.light,
    //   canvasInsetDark: getNested(palette.dark, 'canvas.inset'),
    //   canvasInsetLight: getNested(palette.light, 'canvas.inset'),
    //   fgDefaultDark: getNested(palette.dark, 'fg.default'),
    //   accentFgDark: getNested(palette.dark, 'accent.fg')
    // });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ª–∏—Ç—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Å–µ—Ç–∞ –∏ —Ä–µ–∂–∏–º–∞
    const colors = ThemeColors.generate(palette, config.mode, isDark);
   // console.log('‚úÖ ThemeColors.generate –∑–∞–≤–µ—Ä—à—ë–Ω');

    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ canvas.inset?
    if (!colors.canvas) {
      console.error('‚ùå colors.canvas ‚Äî undefined!');
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ colors:', Object.keys(colors || {}));
      throw new Error('colors.canvas is undefined');
    }

    if (!colors.canvas.inset) {
      console.error('‚ùå colors.canvas.inset ‚Äî undefined!');
     // console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ colors.canvas:', Object.keys(colors.canvas || {}));
      throw new Error('colors.canvas.inset is undefined');
    }

  //  console.log('üü¢ colors.canvas.inset —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', typeof colors.canvas.inset);

    // –§–æ—Ä–º–∏—Ä—É–µ–º tokenColors –∏–∑ JSON —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ü–≤–µ—Ç–æ–≤
    const tokenColors = (tokenColorsConfig as unknown as TokenColorRule[]).map(rule => {
      const settings = { ...rule.settings };

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º foreground –∏ background
      (['foreground', 'background'] as const).forEach(key => {
        const value = settings[key];
        if (typeof value === 'string' && value.startsWith('{{')) {
         // console.log(`üîß –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: ${value}`);
          const match = value.match(/{{(.+?)}}(\d+)/);
          if (match) {
            const path = match[1]; // –Ω–∞–ø—Ä–∏–º–µ—Ä, "syntax.inline"
            const alpha = parseInt(match[2], 10); // 10
         //   console.log(`üéØ –†–∞–∑–æ–±—Ä–∞–Ω–æ: path="${path}", alpha=${alpha}`);
            const [a, b] = path.split('.');
            const colorValue = (colors as any)[a]?.[b];
            if (colorValue) {
           //   console.log(`üé® –¶–≤–µ—Ç –Ω–∞–π–¥–µ–Ω: ${path} ‚Üí OKLCH`, colorValue);
              settings[key] = applyAlpha(colorValue, alpha);
          //    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω HEX: ${settings[key]}`);
            } else {
              console.warn(`üü° –¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—É—Ç–∏: ${path}`);
            }
          } else {
            console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω: ${value}`);
          }
        }
      });

      return { ...rule, settings };
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã scope
    const seenScopes = new Set<string>();
    const duplicates = new Set<string>();

    for (const rule of tokenColors) {
      const scopes = Array.isArray(rule.scope) ? rule.scope : [rule.scope];
      for (const scope of scopes) {
        if (seenScopes.has(scope)) {
          duplicates.add(scope);
        }
        seenScopes.add(scope);
      }
    }

    if (duplicates.size > 0) {
      console.warn(`[ThemeGenerator] Duplicate scopes: ${[...duplicates].join(', ')}`);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ VS Code
    const theme = {
      name: config.name,
      type: config.type,
      semanticHighlighting: true,
      colors: {} as Record<string, string>,
      tokenColors
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ ThemeElementName –∫ —Ç–µ–º–µ
    for (const item of ThemeElementName) {
      try {
        const oklch = item.color(colors);
        theme.colors[item.name] = applyAlpha(oklch, item.Alpha);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ item.color –¥–ª—è "${item.name}":`, error);
        console.log('üìã item:', item);
        console.log('üìã colors structure:', Object.keys(colors));
        console.log('üìã colors.canvas?.inset:', !!colors.canvas?.inset);
        throw error;
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤—É—é —Ç–µ–º—É
    return { config, theme };
  });
}