/**
 *
 * src/colors/ThemeColors.ts
 *
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è Vela Spectrum.
 *
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ `colorPalettePresets` –≤ –ø–æ–ª–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É,
 * –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø–æ —Ä–æ–ª—è–º (accent, success, danger –∏ —Ç.–¥.), —Å —É—á—ë—Ç–æ–º —Ä–µ–∂–∏–º–∞ (colorblind, highContrast –∏ –¥—Ä.).
 *
 * –í—Å–µ —Ü–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ OKLCH (l, c, h), –≥–¥–µ:
 * - l: —Å–≤–µ—Ç–ª–æ—Ç–∞ [0..1]
 * - c: –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
 * - h: —Ç–æ–Ω (–≥—Ä–∞–¥—É—Å—ã)
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ThemeGenerator –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ThemeElementName.
 *
 * @class ThemeColors
 *
 */
import OKLCHColorGenerator from './ColorConverter.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
import { type DetailedPalette } from '../themes/colorPalettePresets.js';

type ThemeMode = 'normal' | 'dimmed' | 'highContrast' | 'colorblind' | 'tritanopia';

export class ThemeColors {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ –∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
   *
   * @param {DetailedPalette} palette - –ü—Ä–µ—Å–µ—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è light/dark
   * @param {ThemeMode} mode - –†–µ–∂–∏–º: normal, dimmed, highContrast, colorblind, tritanopia
   * @param {boolean} isDark - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–º–∞ —Ç—ë–º–Ω–æ–π
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —Ü–≤–µ—Ç–æ–≤ (canvas, fg, accent –∏ —Ç.–¥.)
   */
  static generate ( palette: DetailedPalette, mode: ThemeMode, isDark: boolean ) {
    // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –ø–æ —Ç–∏–ø—É —Ç–µ–º—ã
    const role = isDark ? palette.dark : palette.light;
console.log('üé® Palette role:', role);
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    const getColor = ( key: string ): { l: number; c: number; h: number; } => {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'syntax.punctuation' ‚Üí 'fg.muted')
      let colorName = ThemeColors.getNestedValue( role, key );

      // üîÅ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Ç–∏ –≤—Ä–æ–¥–µ 'fg.muted', 'accent.fg'
      while ( colorName && typeof colorName === 'string' && colorName.includes( '.' ) ) {
        const resolved = ThemeColors.getNestedValue( role, colorName );
        if ( !resolved ) break;
        colorName = resolved;
      }

      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–ø–µ—Ä—å colorName –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π ‚Äî –∏–º–µ–Ω–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ colors.json
      if ( typeof colorName !== 'string' ) {
        console.error(
          `‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω ${ typeof colorName }:`,
          colorName,
          '–¥–ª—è –∫–ª—é—á–∞:',
          key
        );
        return { l: 0.5, c: 0.1, h: 220 };
      }

      if ( !colorName ) {
        console.warn( `–¶–≤–µ—Ç –¥–ª—è –∫–ª—é—á–∞ "${ key }" –Ω–µ –Ω–∞–π–¥–µ–Ω` );
        return { l: 0.5, c: 0.1, h: 220 };
      }

      return this.getOklch( colorName );
    };

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    const accentBase = getColor( 'accent.fg' );
    const successBase = getColor( 'success.fg' );
    const dangerBase = getColor( 'danger.fg' );
    const warningBase = getColor( 'warning.fg' );
    const infoBase = getColor( 'info.fg' );

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤: —Ç–æ–Ω (hue)
    const hAccent = this.adjustHue( accentBase.h, mode );
    const hSuccess = this.adjustHue( successBase.h, mode );
    const hDanger = this.adjustHue( dangerBase.h, mode );
    const hWarning = this.adjustHue( warningBase.h, mode );
    const hInfo = this.adjustHue( infoBase.h, mode );

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤: –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (chroma)
    const cAccent = this.adjustChroma( accentBase.c, mode );
    const cSuccess = this.adjustChroma( successBase.c, mode );
    const cDanger = this.adjustChroma( dangerBase.c, mode );
    const cWarning = this.adjustChroma( warningBase.c, mode );
    const cInfo = this.adjustChroma( infoBase.c, mode );

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–≤–µ—Ç–ª–æ—Ç—ã (lightness) –ø–æ —Ä–µ–∂–∏–º—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const lAccent = this.adjustLightness( 0.8, mode );
    const lAccentEmphasis = this.adjustLightness( 0.7, mode );
    const lSuccess = this.adjustLightness( 0.7, mode );
    const lSuccessEmphasis = this.adjustLightness( 0.6, mode );
    const lDanger = this.adjustLightness( 0.7, mode );
    const lDangerEmphasis = this.adjustLightness( 0.6, mode );
    const lWarning = this.adjustLightness( 0.8, mode );
    const lWarningEmphasis = this.adjustLightness( 0.7, mode );
    const lInfo = this.adjustLightness( 0.8, mode );
    const lInfoEmphasis = this.adjustLightness( 0.7, mode );


    // üî• === –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤—å —ç—Ç–æ ===
    // console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã:', { mode, isDark });
    // console.log('Accent base:', accentBase);
    // console.log('cAccent –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:', cAccent);
    // console.log('hAccent –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:', hAccent);
    // üîö === –ö–æ–Ω–µ—Ü –æ—Ç–ª–∞–¥–∫–∏ ===

    return {
      /**
       * –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏ "—Ö–æ–ª—Å—Ç–∞" –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è:
       * - –§–æ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
       * - –§–æ–Ω–∞ –±–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π
       * - –§–æ–Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
       *
       * @example
       * "editor.background": canvas.inset
       * "sideBar.background": canvas.inset
       */
      canvas: {
        inset: getColor( 'canvas.inset' ),
        overlay: getColor( 'canvas.overlay' )
      },

      /**
       * –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∫–æ–Ω–æ–∫.
       * –û–ø—Ä–µ–¥–µ–ª—è—é—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç.
       *
       * @example
       * "foreground": fg.default
       * "sideBar.foreground": fg.default
       */
      fg: {
        default: getColor( 'fg.default' ),
        muted: getColor( 'fg.muted' ),
        subtle: getColor( 'fg.subtle' )
      },

      /**
       * –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç.
       * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–Ω–∏–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π).
       * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
       *
       * @example
       * "activityBar.foreground": accent.fg
       * "focusBorder": accent.emphasis
       */
      accent: {
        fg: { l: lAccent, c: cAccent, h: hAccent },
        emphasis: { l: lAccentEmphasis, c: cAccent * 1.1, h: hAccent },
        muted: { l: 0.6, c: cAccent * 0.8, h: hAccent }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∑–µ–ª—ë–Ω—ã–µ).
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ Git (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã), –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
       *
       * @example
       * "gitDecoration.addedResourceForeground": success.emphasis
       * "problems.errorForeground": success.fg
       */
      success: {
        fg: { l: lSuccess, c: cSuccess, h: hSuccess },
        emphasis: { l: lSuccessEmphasis, c: cSuccess * 1.2, h: hSuccess },
        muted: { l: 0.6, c: cSuccess * 0.8, h: getColor( 'success.muted' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π (–∫—Ä–∞—Å–Ω—ã–µ).
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ Git (—É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã), –æ—à–∏–±–∫–∞—Ö, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.
       *
       * @example
       * "gitDecoration.deletedResourceForeground": danger.muted
       * "editorError.foreground": danger.fg
       */
      danger: {
        fg: { l: lDanger, c: cDanger, h: hDanger },
        emphasis: { l: lDangerEmphasis, c: cDanger * 1.2, h: hDanger },
        muted: { l: 0.6, c: cDanger * 0.8, h: getColor( 'danger.muted' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–∂—ë–ª—Ç—ã–µ).
       * –í VS Code –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "severe", –Ω–æ –ø–æ —Å–º—ã—Å–ª—É ‚Äî —ç—Ç–æ warning.
       *
       * @example
       * "editorWarning.foreground": severe.fg
       */
      severe: {
        fg: { l: lWarning, c: cWarning, h: hWarning },
        emphasis: { l: 0.7, c: cWarning * 0.9, h: hWarning },
        muted: { l: 0.6, c: cWarning * 0.7, h: getColor( 'warning.muted' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∏–Ω–∏–µ).
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–æ–ø—Ä–æ—Å–æ–≤.
       *
       * @example
       * "editorInfo.foreground": attention.fg
       */
      attention: {
        fg: { l: lInfo, c: cInfo, h: hInfo },
        emphasis: { l: lInfoEmphasis, c: cInfo * 1.1, h: hInfo }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, "–ø–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç".
       * –û–±—ã—á–Ω–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∏–ª–∏ —Ä–æ–∑–æ–≤—ã–µ.
       *
       * @example
       * "sash.hoverBorder": sponsors.fg
       */
      sponsors: {
        fg: { l: 0.75, c: cAccent * 0.9, h: getColor( 'sponsors.fg' ).h },
        muted: { l: 0.6, c: cAccent * 0.7, h: getColor( 'sponsors.muted' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è "—Å–¥–µ–ª–∞–Ω–æ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ".
       * –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö –∑–∞–¥–∞—á, –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
       *
       * @example
       * "list.completedTaskIcon.foreground": done.fg
       */
      done: {
        fg: { l: 0.7, c: cSuccess * 0.9, h: getColor( 'done.fg' ).h },
        emphasis: { l: 0.6, c: cSuccess * 1.1, h: getColor( 'done.emphasis' ).h },
        muted: { l: 0.6, c: cSuccess * 0.6, h: getColor( 'done.muted' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è "–∑–∞–∫—Ä—ã—Ç–æ".
       * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∫–ª–∞–¥–∫–∞—Ö, –∑–∞–¥–∞—á–∞—Ö, —Ç–∏–∫–µ—Ç–∞—Ö.
       *
       * @example
       * "tab.inactiveModifiedBorder": closed.fg
       */
      closed: {
        fg: { l: 0.6, c: cDanger * 0.9, h: getColor( 'closed.fg' ).h },
        /**
         * –ë–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
         */
        emphasis: { l: 0.6, c: cDanger * 1.2, h: getColor( 'closed.fg' ).h },
        /**
         * –ü—Ä–∏–≥–ª—É—à—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
         */
        muted: { l: 0.6, c: cDanger * 0.8, h: getColor( 'closed.fg' ).h }
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è "–æ—Ç–∫—Ä—ã—Ç–æ".
       * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –∑–∞–¥–∞—á–∞—Ö, —Ñ–∞–π–ª–∞—Ö.
       *
       * @example
       * "tab.activeBorder": open.emphasis
       */
      open: {
        fg: { l: 0.7, c: cSuccess * 0.8, h: getColor( 'open.fg' ).h },
        emphasis: { l: 0.6, c: cSuccess * 1.0, h: getColor( 'open.emphasis' ).h }
      },

      /**
       * ANSI-—Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
       * –ü–æ–ª–Ω–∞—è 16-—Ü–≤–µ—Ç–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞.
       *
       * @example
       * "terminal.ansiRed": ansi.red
       * "terminal.ansiGreenBright": ansi.greenBright
       */
      ansi: {
        black: getColor( 'ansi.black' ),
        red: { l: 0.4, c: this.adjustChroma( getColor( 'ansi.red' ).c, mode ), h: this.adjustHue( getColor( 'ansi.red' ).h, mode ) },
        green: { l: 0.5, c: this.adjustChroma( getColor( 'ansi.green' ).c, mode ), h: this.adjustHue( getColor( 'ansi.green' ).h, mode ) },
        yellow: { l: 0.6, c: this.adjustChroma( getColor( 'ansi.yellow' ).c, mode ), h: this.adjustHue( getColor( 'ansi.yellow' ).h, mode ) },
        blue: { l: 0.55, c: this.adjustChroma( getColor( 'ansi.blue' ).c, mode ), h: this.adjustHue( getColor( 'ansi.blue' ).h, mode ) },
        magenta: { l: 0.5, c: this.adjustChroma( getColor( 'ansi.magenta' ).c, mode ), h: this.adjustHue( getColor( 'ansi.magenta' ).h, mode ) },
        cyan: { l: 0.55, c: this.adjustChroma( getColor( 'ansi.cyan' ).c, mode ), h: this.adjustHue( getColor( 'ansi.cyan' ).h, mode ) },
        white: getColor( 'ansi.white' ),
        blackBright: getColor( 'ansi.blackBright' ),
        redBright: { l: 0.5, c: this.adjustChroma( getColor( 'ansi.redBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.redBright' ).h, mode ) },
        greenBright: { l: 0.6, c: this.adjustChroma( getColor( 'ansi.greenBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.greenBright' ).h, mode ) },
        yellowBright: { l: 0.7, c: this.adjustChroma( getColor( 'ansi.yellowBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.yellowBright' ).h, mode ) },
        blueBright: { l: 0.65, c: this.adjustChroma( getColor( 'ansi.blueBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.blueBright' ).h, mode ) },
        magentaBright: { l: 0.6, c: this.adjustChroma( getColor( 'ansi.magentaBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.magentaBright' ).h, mode ) },
        cyanBright: { l: 0.65, c: this.adjustChroma( getColor( 'ansi.cyanBright' ).c, mode ), h: this.adjustHue( getColor( 'ansi.cyanBright' ).h, mode ) },
        whiteBright: getColor( 'ansi.whiteBright' )
      },

      /**
       * –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ (—Å–µ—Ä—ã–µ).
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥—Ä–∞–Ω–∏—Ü, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, —Ñ–æ–Ω–æ–≤.
       *
       * @example
       * "border.muted": neutral.muted
       * "list.hoverBackground": neutral.emphasis
       */
      neutral: {
        muted: getColor( 'neutral.muted' ),
        emphasis: getColor( 'neutral.emphasis' ),
        emphasisPlus: getColor( 'neutral.emphasisPlus' )
      },

      /**
       * –¶–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü.
       * –û–±—ã—á–Ω–æ –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤.
       *
       * @example
       * "editorGutter.addedBackground": border.muted
       */
      border: {
        muted: getColor( 'border.muted' )
      },

      /**
       * –¶–≤–µ—Ç–∞ –¥–ª—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞.
       * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ tokenColors –¥–ª—è —Ç–æ—á–Ω–æ–π —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ç–∏–ø–æ–≤, —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç.–¥.
       */
      syntax: {
        // === –¢–∏–ø—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===
        type: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.type' ).c, mode ), h: this.adjustHue( getColor( 'syntax.type' ).h, mode ) },
        enum: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.enum' ).c, mode ), h: this.adjustHue( getColor( 'syntax.enum' ).h, mode ) },
        interface: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.interface' ).c, mode ), h: this.adjustHue( getColor( 'syntax.interface' ).h, mode ) },
        class: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.class' ).c, mode ), h: this.adjustHue( getColor( 'syntax.class' ).h, mode ) },
        struct: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.struct' ).c, mode ), h: this.adjustHue( getColor( 'syntax.struct' ).h, mode ) },

        // === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
        variable: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.variable' ).c, mode ), h: this.adjustHue( getColor( 'syntax.variable' ).h, mode ) },
        parameter: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.parameter' ).c, mode ), h: this.adjustHue( getColor( 'syntax.parameter' ).h, mode ) },
        property: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.property' ).c, mode ), h: this.adjustHue( getColor( 'syntax.property' ).h, mode ) },
        field: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.field' ).c, mode ), h: this.adjustHue( getColor( 'syntax.field' ).h, mode ) },
        constant: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.constant' ).c, mode ), h: this.adjustHue( getColor( 'syntax.constant' ).h, mode ) },
        local: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.local' ).c, mode ), h: this.adjustHue( getColor( 'syntax.local' ).h, mode ) },

        // === –§—É–Ω–∫—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã ===
        function: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.function' ).c, mode ), h: this.adjustHue( getColor( 'syntax.function' ).h, mode ) },
        method: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.method' ).c, mode ), h: this.adjustHue( getColor( 'syntax.method' ).h, mode ) },
        arrowFunction: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.arrowFunction' ).c, mode ), h: this.adjustHue( getColor( 'syntax.arrowFunction' ).h, mode ) },
        constructor: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.constructor' ).c, mode ), h: this.adjustHue( getColor( 'syntax.constructor' ).h, mode ) },

        // === –ú–æ–¥—É–ª–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω ===
        module: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.module' ).c, mode ), h: this.adjustHue( getColor( 'syntax.module' ).h, mode ) },
        namespace: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.namespace' ).c, mode ), h: this.adjustHue( getColor( 'syntax.namespace' ).h, mode ) },

        // === –õ–∏—Ç–µ—Ä–∞–ª—ã ===
        string: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.string' ).c, mode ), h: this.adjustHue( getColor( 'syntax.string' ).h, mode ) },
        number: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.number' ).c, mode ), h: this.adjustHue( getColor( 'syntax.number' ).h, mode ) },
        boolean: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.boolean' ).c, mode ), h: this.adjustHue( getColor( 'syntax.boolean' ).h, mode ) },
        null: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.null' ).c, mode ), h: this.adjustHue( getColor( 'syntax.null' ).h, mode ) },
        regexp: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.regexp' ).c, mode ), h: this.adjustHue( getColor( 'syntax.regexp' ).h, mode ) },
        templateString: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.templateString' ).c, mode ), h: this.adjustHue( getColor( 'syntax.templateString' ).h, mode ) },

        // === –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã ===
        keyword: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.keyword' ).c, mode ), h: this.adjustHue( getColor( 'syntax.keyword' ).h, mode ) },
        operator: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.operator' ).c, mode ), h: this.adjustHue( getColor( 'syntax.operator' ).h, mode ) },
        modifier: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.modifier' ).c, mode ), h: this.adjustHue( getColor( 'syntax.modifier' ).h, mode ) },
        decorator: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.decorator' ).c, mode ), h: this.adjustHue( getColor( 'syntax.decorator' ).h, mode ) },
        comment: { l: 0.6, c: this.adjustChroma( getColor( 'syntax.comment' ).c, mode ), h: this.adjustHue( getColor( 'syntax.comment' ).h, mode ) },

        // === –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ===
        error: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.error' ).c, mode ), h: this.adjustHue( getColor( 'syntax.error' ).h, mode ) },
        warning: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.warning' ).c, mode ), h: this.adjustHue( getColor( 'syntax.warning' ).h, mode ) },
        info: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.info' ).c, mode ), h: this.adjustHue( getColor( 'syntax.info' ).h, mode ) },

        // === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏ ===
        tag: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.tag' ).c, mode ), h: this.adjustHue( getColor( 'syntax.tag' ).h, mode ) },
        support: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.support' ).c, mode ), h: this.adjustHue( getColor( 'syntax.support' ).h, mode ) },
        punctuation: { l: 0.6, c: this.adjustChroma( getColor( 'syntax.punctuation' ).c, mode ), h: this.adjustHue( getColor( 'syntax.punctuation' ).h, mode ) },
        heading: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.heading' ).c, mode ), h: this.adjustHue( getColor( 'syntax.heading' ).h, mode ) },
        quote: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.quote' ).c, mode ), h: this.adjustHue( getColor( 'syntax.quote' ).h, mode ) },
        embedded: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.embedded' ).c, mode ), h: this.adjustHue( getColor( 'syntax.embedded' ).h, mode ) },
        inserted: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.inserted' ).c, mode ), h: this.adjustHue( getColor( 'syntax.inserted' ).h, mode ) },
        deleted: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.deleted' ).c, mode ), h: this.adjustHue( getColor( 'syntax.deleted' ).h, mode ) },
        changed: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.changed' ).c, mode ), h: this.adjustHue( getColor( 'syntax.changed' ).h, mode ) },
        ignored: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.ignored' ).c, mode ), h: this.adjustHue( getColor( 'syntax.ignored' ).h, mode ) },
        range: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.range' ).c, mode ), h: this.adjustHue( getColor( 'syntax.range' ).h, mode ) },
        header: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.header' ).c, mode ), h: this.adjustHue( getColor( 'syntax.header' ).h, mode ) },
        separator: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.separator' ).c, mode ), h: this.adjustHue( getColor( 'syntax.separator' ).h, mode ) },
        output: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.output' ).c, mode ), h: this.adjustHue( getColor( 'syntax.output' ).h, mode ) },
        link: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.link' ).c, mode ), h: this.adjustHue( getColor( 'syntax.link' ).h, mode ) },
        inline: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.inline' ).c, mode ), h: this.adjustHue( getColor( 'syntax.inline' ).h, mode ) },
        emphasis: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.emphasis' ).c, mode ), h: this.adjustHue( getColor( 'syntax.emphasis' ).h, mode ) },
        strong: { l: 0.7, c: this.adjustChroma( getColor( 'syntax.strong' ).c, mode ), h: this.adjustHue( getColor( 'syntax.strong' ).h, mode ) }
      }
    };
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   * –ü—Ä–∏–º–µ—Ä: getNestedValue(obj, 'canvas.inset') ‚Üí obj.canvas.inset
   */
private static getNestedValue(obj: any, path: string): string | undefined {
  const keys = path.split('.');
  let current = obj;

  for (const key of keys) {
    if (current == null || typeof current !== 'object' || !(key in current)) {
      console.warn(`–ü—É—Ç—å "${path}" –Ω–µ –Ω–∞–π–¥–µ–Ω: –∫–ª—é—á "${key}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      return undefined;
    }
    current = current[key];
  }

  return current;
}

  private static getOklch ( colorName: string ) {
    const colorEntry = OKLCHColorGenerator.getColorRgb( colorName );
    if ( !colorEntry ) throw new Error( `–¶–≤–µ—Ç "${ colorName }" –Ω–µ –Ω–∞–π–¥–µ–Ω` );

    const rgbColor = {
      mode: 'rgb' as const,
      r: colorEntry.rgb.r,
      g: colorEntry.rgb.g,
      b: colorEntry.rgb.b,
      alpha: 1
    };

    return OKLCHColorGenerator.rgbToOKLCH( rgbColor );
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç–æ–Ω (hue) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.
   *
   * @param h - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–Ω (0‚Äì360)
   * @param mode - –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–Ω
   */
  private static adjustHue ( h: number, mode: ThemeMode ): number {
    if ( mode === 'colorblind' ) {
      return h >= 200 && h <= 300 ? 250 : h;
    }
    if ( mode === 'tritanopia' ) {
      return h >= 200 && h <= 300 ? 200 : h;
    }
    return h;
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (chroma) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.
   *
   * @param c - –ò—Å—Ö–æ–¥–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
   * @param mode - –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
   */
  private static adjustChroma ( c: number, mode: ThemeMode ): number {
    if ( mode === 'dimmed' ) return c * 0.7;
    if ( mode === 'highContrast' ) return Math.min( c * 1.3, 0.4 );
    return c;
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–µ—Ç–ª–æ—Ç—É (lightness) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.
   *
   * @param l - –ò—Å—Ö–æ–¥–Ω–∞—è —Å–≤–µ—Ç–ª–æ—Ç–∞ [0..1]
   * @param mode - –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–µ—Ç–ª–æ—Ç–∞
   */
  private static adjustLightness ( l: number, mode: ThemeMode ): number {
    if ( mode === 'dimmed' ) return l * 0.95;
    if ( mode === 'highContrast' ) return l > 0.5 ? 1.0 : 0.0;
    return l;
  }
}